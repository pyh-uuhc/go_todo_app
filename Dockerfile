# --------------------------------------------------------------------------------
# deply-builder: 릴리스용 빌드를 생성하는 스테이지
# --------------------------------------------------------------------------------
FROM golang:1.18.2-bullseye as deploy-builder
# 'golang:1.18.2-bullseye' 이미지를 기반으로 새로운 이미지를 생성
# 이 이미지는 Go 언어 1.18.2 버전과 Debian Bullseye 운영체제를 포함한다.

WORKDIR /app
# 컨테이너 내부에서 작업 디렉토리를 '/app'으로 설정
# 이 명령 이후에 실행되는 모든 명령은 이 디렉토리 내에서 실행된다.

COPY go.mod go.sum ./
# 호스트 시스템의 현재 디렉토리에 있는 'go.mod'와 'go.sum' 파일을 컨테이너의 작업 디렉토리('/app')로 복사

COPY . .
# 호스트 시스템의 현재 디렉토리에 있는 모든 파일을 컨테이너의 작업 디렉토리('/app')로 복사
# 프로젝트의 소스 코드와 필요한 모든 파일을 컨테이너로 복사
RUN go build -trimpath -ldflags "-w -s" -o app
# go build 명령을 실행하여 소스 코드를 빌드
# -trimpath 플래그는 빌드 경로 정보를 제거하여 빌드 결과물을 더 작게 만든다.
# -ldflags "-w -s" 플래그는 빌드된 바이너리에서 디버깅 정보를 제거하여 크기를 줄인다.
# -o app 플래그는 빌드된 실행 파일의 이름을 app으로 지정한다.

# --------------------------------------------------------------------------------
# deploy: 빌드한 바이너리를 릴리스하기 위한 컨테이너 생성 스테이지
# --------------------------------------------------------------------------------
FROM debian:bullseye-slim as deploy
# debian:bullseye-slim 이미지를 기반으로 새로운 이미지를 생성

RUN apt-get update
# apt-get update 명령을 사용하여 패키지 매니저의 패키지 리스트를 최신 상태로 업데이트

COPY --from=deploy-builder /app/app .
# --from=deploy-builder 옵션을 사용하여 이전 단계에서 생성한 deploy-builder 단계의 이미지에서 파일을 복사
# /app/app은 deploy-builder 단계에서 빌드한 실행 파일을 의미
# .은 현재 작업 디렉토리(기본적으로 /)를 의미하며, 여기에 실행 파일을 복사한다.

CMD ["./app"]
# ["./app"]은 /app 디렉토리에 복사된 실행 파일 app을 실행하는 명령
# 이 Dockerfile의 경우, 컨테이너가 시작되면 ./app이라는 실행 파일이 실행되어야 한다.

# --------------------------------------------------------------------------------
# dev: 로컬에서 개발할 때 사용할 컨테이너 생성 스테이지
# --------------------------------------------------------------------------------
FROM golang:1.18.2 as dev
WORKDIR /app
# 컨테이너 내부의 작업 디렉토리를 /app으로 설정
RUN go install github.com/cosmtrek/air@latest
# air는 Go 언어 개발 시 코드 변경 감지 및 자동 재시작 기능을 제공하는 도구
CMD ["air"]
# 컨테이너가 시작될 때 실행할 명령을 지정
# ["air"]는 개발 환경에서 실행할 기본 명령으로, air 도구를 실행하여 개발 중인 Go 애플리케이션의 변경 사항을 감지하고 자동으로 서버를 재시작